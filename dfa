[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex ab577e6..2d177c4 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -1,5 +1,6 @@[m
 *.bin[m
 *.o[m
 *.out[m
[31m-sys/*.h[m
[31m-sys/*.so[m
[32m+[m[32m*.a[m
[32m+[m[32msys/**.h[m
[41m+[m
[1mdiff --git a/kernel/Makefile b/kernel/Makefile[m
[1mindex aede640..97451d0 100644[m
[1m--- a/kernel/Makefile[m
[1m+++ b/kernel/Makefile[m
[36m@@ -12,29 +12,46 @@[m [mAS := $(GNU_ARCH)-as[m
 [m
 CFLAGS := -std=gnu99 -ffreestanding -Wall -Wextra -O2 [m
 CPPFLAGS := [m
[31m-LDFLAGS := -ffreestanding -O2 -nostdlib -lgcc -T $(ARCH_DIR)/linker.ld[m
[32m+[m[32mLDFLAGS := -ffreestanding -O2 -lk -nostdlib -lgcc -T $(ARCH_DIR)/linker.ld[m
 [m
 SYSTEM_DIR := ../sys[m
[31m-INCLUDE_DIR := $(SYSTEM_DIR)/lib[m
[32m+[m[32mINCLUDE_DIR := $(SYSTEM_DIR)/include[m
[32m+[m[32mLIB_DIR := $(SYSTEM_DIR)/lib[m
 CPPFLAGS := $(CPPFLAGS) -I$(INCLUDE_DIR)[m
[32m+[m[32mLDFLAGS := $(LDFLAGS) --sysroot=$(SYSTEM_DIR)[m
[32m+[m[32mCFLAGS := $(CFLAGS) --sysroot=$(SYSTEM_DIR) -isystem=/include/libc[m
 [m
 include $(ARCH_DIR)/make.cfg[m
 [m
[31m-OBJ_FILES := $(ARCH_OBJS) src/kernel.o src/vga.o src/terminal.o[m
[32m+[m[32mKERNEL_OBJS := $(ARCH_OBJS) src/kernel.o src/vga.o src/terminal.o[m
[32m+[m[32mOBJ_FILES := \[m
[32m+[m	[32m$(ARCH_DIR)/src/crti.o $(ARCH_DIR)/src/crtbegin.o \[m
[32m+[m	[32m$(KERNEL_OBJS) \[m
[32m+[m	[32m$(ARCH_DIR)/src/crtend.o $(ARCH_DIR)/src/crtn.o[m
 [m
 HEADERS := $(wildcard include/*.h)[m
 [m
 all: install-headers $(OBJ_FILES)[m
[31m-	$(CC) $(LDFLAGS) $(OBJ_FILES) -o $(BIN_DIR)/kernel.bin[m
[32m+[m	[32m$(CC) $(OBJ_FILES) $(LDFLAGS) -o $(BIN_DIR)/kernel.bin[m
[32m+[m	[32m@echo "Copying the kernel file..."[m
[32m+[m	[32m@mkdir -p $(LIB_DIR)/kernel[m
[32m+[m	[32m@cp $(BIN_DIR)/kernel.bin $(LIB_DIR)/kernel[m
 [m
 install-headers:[m
 	@echo "Installing the system headers"[m
 	@mkdir -p $(INCLUDE_DIR)/kernel[m
 	@cp $(HEADERS) $(INCLUDE_DIR)/kernel[m
 [m
[32m+[m[32m$(ARCH_DIR)/src/crtbegin.o $(ARCH_DIR)/src/crtend.o:[m
[32m+[m	[32mOBJ=`$(CC) $(CFLAGS) $(LDFLAGS) -print-file-name=$(@F)` && cp "$$OBJ" $@[m
[32m+[m
 %.o: %.c[m
[31m-	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@[m
[32m+[m	[32m$(CC) $(CFLAGS) -std=gnu11 $(CPPFLAGS) -c $< -o $@[m
 [m
 %.o: %.s[m
 	$(AS) $< -o $@[m
 [m
[32m+[m[32mclean:[m
[32m+[m	[32m@rm src/*.o[m
[32m+[m	[32m@rm arch/*/src/*.o[m
[32m+[m
[1mdiff --git a/kernel/arch/i386/make.cfg b/kernel/arch/i386/make.cfg[m
[1mindex e11736a..2a35e02 100644[m
[1m--- a/kernel/arch/i386/make.cfg[m
[1m+++ b/kernel/arch/i386/make.cfg[m
[36m@@ -1,3 +1,3 @@[m
 [m
[31m-ARCH_OBJS := $(ARCH_DIR)/src/boot.o[m
[32m+[m[32mARCH_OBJS := $(ARCH_DIR)/src/boot.o $(ARCH_DIR)/src/interrupts.o $(ARCH_DIR)/src/isr.o[m
 [m
[1mdiff --git a/kernel/arch/i386/src/boot.s b/kernel/arch/i386/src/boot.s[m
[1mindex d145696..3d9af79 100644[m
[1m--- a/kernel/arch/i386/src/boot.s[m
[1m+++ b/kernel/arch/i386/src/boot.s[m
[36m@@ -1,6 +1,6 @@[m
 // Multiboot definitions[m
[31m-.set ALIGN,    1<<0             [m
[31m-.set MEMINFO,  1<<1             [m
[32m+[m[32m.set ALIGN,    1[m
[32m+[m[32m.set MEMINFO,  0b10[m[41m             [m
 .set FLAGS,    ALIGN | MEMINFO  [m
 .set MAGIC,    0x1BADB002       [m
 .set CHECKSUM, -(MAGIC + FLAGS) [m
[36m@@ -19,6 +19,48 @@[m [mstack_bottom:[m
 .skip 16384 # 16 KiB[m
 stack_top:[m
 [m
[32m+[m[32m.section .data[m
[32m+[m
[32m+[m[32m.align 8[m
[32m+[m[32midt_start:[m
[32m+[m[32m.rept 256[m
[32m+[m[32m.word 0x0, 0x0, 0x0, 0x0[m
[32m+[m[32m.endr[m
[32m+[m
[32m+[m[32midt_end:[m
[32m+[m
[32m+[m[32midt_desc:[m
[32m+[m[32m.word idt_start - idt_end - 1[m
[32m+[m[32m.long idt_start[m
[32m+[m
[32m+[m[32mgdt_start:[m
[32m+[m
[32m+[m[32mgdt_null:[m
[32m+[m[32m    .long 0[m
[32m+[m[32m    .long 0[m
[32m+[m
[32m+[m[32mgdt_code:[m
[32m+[m[32m    .word 0xFFFF # segment limiter[m
[32m+[m[32m    .word 0x0000 # base[m
[32m+[m[32m    .byte 0x00 # base[m
[32m+[m[32m    .byte 0b10011010[m
[32m+[m[32m    .byte 0b11001111[m
[32m+[m[32m    .byte 0x00 # base[m
[32m+[m
[32m+[m[32mgdt_data:[m
[32m+[m[32m    .word 0xFFFF # segment limiter[m
[32m+[m[32m    .word 0x0000 # base[m
[32m+[m[32m    .byte 0x00 # base[m
[32m+[m[32m    .byte 0b10010010[m
[32m+[m[32m    .byte 0b11001111[m
[32m+[m[32m    .byte 0x00 # base[m
[32m+[m
[32m+[m[32mgdt_end:[m
[32m+[m
[32m+[m[32mgdt_desc:[m
[32m+[m[32m.word gdt_start - gdt_end - 1[m
[32m+[m[32m.long gdt_start[m
[32m+[m
 .section .text[m
 [m
 .globl _start[m
[36m@@ -26,6 +68,29 @@[m [mstack_top:[m
 [m
 _start:[m
 	movl $stack_top, %esp[m
[32m+[m[41m	[m
[32m+[m	[32mcli[m
[32m+[m	[32mlgdt gdt_desc[m
[32m+[m
[32m+[m	[32mmovw $0x10, %ax[m
[32m+[m	[32mmovw %ax, %ds[m
[32m+[m	[32mmovw %ax, %es[m
[32m+[m	[32mmovw %ax, %fs[m
[32m+[m	[32mmovw %ax, %gs[m
[32m+[m	[32mmovw %ax, %ss[m
[32m+[m	[32mljmp $0x08, $continue_processing[m
[32m+[m
[32m+[m[32mcontinue_processing:[m
[32m+[m
[32m+[m	[32mcall terminal_init # So that we can log before kernel()[m
[32m+[m
[32m+[m	[32mlea idt_start, %eax[m
[32m+[m	[32mpush %eax[m
[32m+[m[41m	[m
[32m+[m	[32mcall generate_idt[m
[32m+[m	[32msti[m
[32m+[m[41m	[m
[32m+[m	[32mcall remap_irqs[m
 [m
 	call kernel[m
 [m
[36m@@ -34,11 +99,3 @@[m [m_halt:[m
 	cli[m
 	hlt[m
 	jmp _halt[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/kernel/arch/i386/src/crti.s b/kernel/arch/i386/src/crti.s[m
[1mnew file mode 100644[m
[1mindex 0000000..cce3ab7[m
[1m--- /dev/null[m
[1m+++ b/kernel/arch/i386/src/crti.s[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m.section .init[m
[32m+[m[32m.global _init[m
[32m+[m[32m.type _init, @function[m
[32m+[m[32m_init:[m
[32m+[m	[32mpush %ebp[m
[32m+[m	[32mmovl %esp, %ebp[m
[32m+[m	[32m/* gcc will nicely put the contents of crtbegin.o's .init section here. */[m
[32m+[m
[32m+[m[32m.section .fini[m
[32m+[m[32m.global _fini[m
[32m+[m[32m.type _fini, @function[m
[32m+[m[32m_fini:[m
[32m+[m	[32mpush %ebp[m
[32m+[m	[32mmovl %esp, %ebp[m
[1mdiff --git a/kernel/arch/i386/src/crtn.s b/kernel/arch/i386/src/crtn.s[m
[1mnew file mode 100644[m
[1mindex 0000000..33957bf[m
[1m--- /dev/null[m
[1m+++ b/kernel/arch/i386/src/crtn.s[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m.section .init[m
[32m+[m	[32m/* gcc will nicely put the contents of crtend.o's .init section here. */[m
[32m+[m	[32mpopl %ebp[m
[32m+[m	[32mret[m
[32m+[m
[32m+[m[32m.section .fini[m
[32m+[m	[32m/* gcc will nicely put the contents of crtend.o's .fini section here. */[m
[32m+[m	[32mpopl %ebp[m
[32m+[m	[32mret[m
[1mdiff --git a/kernel/arch/i386/src/interrupts.c b/kernel/arch/i386/src/interrupts.c[m
[1mnew file mode 100644[m
[1mindex 0000000..766ff37[m
[1m--- /dev/null[m
[1m+++ b/kernel/arch/i386/src/interrupts.c[m
[36m@@ -0,0 +1,109 @@[m
[32m+[m[32m#include "kernel/terminal.h"[m
[32m+[m[32m#include "kernel/io.h"[m
[32m+[m
[32m+[m[32m#include <stdint.h>[m
[32m+[m[32m#include <stddef.h>[m
[32m+[m
[32m+[m[32m#define PIC1_CMD 0x20[m
[32m+[m[32m#define PIC1_DATA 0x21[m
[32m+[m[32m#define PIC2_CMD 0xA0[m
[32m+[m[32m#define PIC2_DATA 0xA1[m
[32m+[m
[32m+[m[32m#define PIC_INIT 0x11 // Init and ICW 4[m
[32m+[m[32m#define PIC_8086_MODE 0x01[m
[32m+[m
[32m+[m[32m// adds the IRQ number to this, ex. IRQ 1 + 32 = 33, and thats the interrupt issued[m
[32m+[m[32m#define PIC1_OFFSET 0x20[m[41m [m
[32m+[m[32m#define PIC2_OFFSET 0x28[m
[32m+[m
[32m+[m[32m#define KEYBOARD_CONTROLLER 0x64[m
[32m+[m[32m#define KEYBOARD_OUTPUT 0x60[m
[32m+[m[32m#define DISABLE_KEYBOARD 0xAE[m
[32m+[m
[32m+[m[32mvoid setup_keyboard()[m
[32m+[m[32m{[m
[32m+[m	[32moutb(KEYBOARD_CONTROLLER, DISABLE_KEYBOARD);[m
[32m+[m	[32moutb(KEYBOARD_CONTROLLER, 0x20); // Use IRQ 1[m
[32m+[m	[32minb(KEYBOARD_OUTPUT); // Empties the output buffer[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// See https://wiki.osdev.org/PIC#Programming_with_the_8259_PIC[m
[32m+[m[32m// And the official documentation for the PIC 8259[m
[32m+[m[32mvoid remap_irqs()[m
[32m+[m[32m{[m
[32m+[m	[32moutb(PIC1_CMD, PIC_INIT);[m
[32m+[m	[32moutb(PIC2_CMD, PIC_INIT);[m
[32m+[m
[32m+[m	[32moutb(PIC1_DATA, PIC1_OFFSET);[m
[32m+[m	[32moutb(PIC2_DATA, PIC2_OFFSET);[m
[32m+[m
[32m+[m	[32moutb(PIC1_DATA, 0b0100); // There is a slave at IRQ 2[m
[32m+[m	[32moutb(PIC2_DATA, 0b0010); // The master IR is 2[m
[32m+[m
[32m+[m	[32moutb(PIC1_DATA, PIC_8086_MODE);[m
[32m+[m	[32moutb(PIC2_DATA, PIC_8086_MODE);[m
[32m+[m
[32m+[m	[32moutb(PIC1_DATA, 0xFD);[m
[32m+[m	[32moutb(PIC2_DATA, 0x0);[m
[32m+[m
[32m+[m	[32msetup_keyboard();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// The ISRs from assembly[m
[32m+[m[32mextern void asm_isr13(void);[m
[32m+[m[32mextern void asm_isr33(void);[m
[32m+[m
[32m+[m[32mtypedef struct[m[41m [m
[32m+[m[32m{[m
[32m+[m	[32muint16_t offset_low;[m
[32m+[m	[32muint16_t selector;[m
[32m+[m	[32muint8_t zero;[m
[32m+[m	[32muint8_t flags;[m
[32m+[m	[32muint16_t offset_high;[m
[32m+[m[32m} __attribute__((packed)) idt_entry;[m
[32m+[m
[32m+[m[32mtypedef struct[m
[32m+[m[32m{[m
[32m+[m	[32muint16_t size;[m
[32m+[m	[32muint32_t offset;[m
[32m+[m[32m} __attribute__((packed)) idt_descriptor;[m
[32m+[m
[32m+[m[32mvoid set_idt_entry(idt_entry* idt, uint32_t num, uint32_t isr_ptr, uint16_t selector, uint8_t flags)[m
[32m+[m[32m{[m
[32m+[m	[32midt[num].offset_low = isr_ptr & 0xFFFF;[m
[32m+[m	[32midt[num].selector = selector;[m
[32m+[m	[32midt[num].zero = 0;[m
[32m+[m	[32midt[num].flags = flags;[m
[32m+[m	[32midt[num].offset_high = (isr_ptr >> 16) & 0xFFFF;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstatic idt_entry idt[256];[m
[32m+[m[32mstatic idt_descriptor idtd;[m
[32m+[m
[32m+[m[32mvoid generate_idt()[m
[32m+[m[32m{[m
[32m+[m	[32mfor (size_t i = 0; i < 256; i++)[m
[32m+[m	[32m{[m
[32m+[m		[32m// set_idt_entry(idt, i, (uint32_t)asm_isr33, 0x8, 0b10001110);[m
[32m+[m		[32mset_idt_entry(idt, i, 0, 0x0, 0b00001110);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mset_idt_entry(idt, 13, (uint32_t)asm_isr13, 0x8, 0b10001110);[m
[32m+[m	[32mset_idt_entry(idt, 33, (uint32_t)asm_isr33, 0x8, 0b10001110);[m
[32m+[m
[32m+[m	[32midtd.size = sizeof(idt_entry) * 256 - 1;[m
[32m+[m	[32midtd.offset = (uint32_t)idt;[m
[32m+[m
[32m+[m	[32masm volatile ("lidt (%0)" : : "r"(&idtd));[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid int13_handler()[m
[32m+[m[32m{[m
[32m+[m	[32mterminal_writestring("General Protection Fault");[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid int33_handler()[m
[32m+[m[32m{[m
[32m+[m	[32mterminal_writestring("ISR-33!\n");[m
[32m+[m	[32moutb(PIC1_CMD, 0x20); // EOI[m
[32m+[m[32m}[m
[1mdiff --git a/kernel/arch/i386/src/isr.s b/kernel/arch/i386/src/isr.s[m
[1mnew file mode 100644[m
[1mindex 0000000..fd005ca[m
[1m--- /dev/null[m
[1m+++ b/kernel/arch/i386/src/isr.s[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m.extern int13_handler[m
[32m+[m[32m.extern int32_handler[m
[32m+[m
[32m+[m[32m.section .text[m
[32m+[m
[32m+[m[32m.globl asm_isr13 # Generat protection fault[m
[32m+[m[32masm_isr13:[m
[32m+[m[32m    pushal[m
[32m+[m[41m    [m
[32m+[m[32m    call int13_handler[m
[32m+[m
[32m+[m[32m    popal[m
[32m+[m[32m    sti[m
[32m+[m[32m    iret[m
[32m+[m
[32m+[m[32m.globl asm_isr33[m
[32m+[m[32masm_isr33:[m
[32m+[m[32m    pushal[m
[32m+[m
[32m+[m[32m    call int33_handler[m
[32m+[m
[32m+[m[32m    popal[m
[32m+[m[32m    sti[m
[32m+[m[32m    iret[m
[1mdiff --git a/kernel/include/io.h b/kernel/include/io.h[m
[1mnew file mode 100644[m
[1mindex 0000000..461a55a[m
[1m--- /dev/null[m
[1m+++ b/kernel/include/io.h[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#ifndef __IO_H[m
[32m+[m[32m#define __IO_H[m
[32m+[m
[32m+[m[32m#include <stddef.h>[m
[32m+[m[32m#include <stdint.h>[m
[32m+[m
[32m+[m[32minline void outb(uint16_t port, uint8_t value)[m
[32m+[m[32m{[m
[32m+[m[32m    asm volatile ("outb %1, %0" : : "dN" (port), "a" (value));[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32minline uint8_t inb(uint16_t port) {[m
[32m+[m[32m    uint8_t data;[m
[32m+[m[32m    asm volatile ("inb %1, %0" : "=a" (data) : "Nd" (port));[m
[32m+[m[32m    return data;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#endif[m
\ No newline at end of file[m
[1mdiff --git a/kernel/src/kernel.c b/kernel/src/kernel.c[m
[1mindex 0d8625a..937df05 100644[m
[1m--- a/kernel/src/kernel.c[m
[1m+++ b/kernel/src/kernel.c[m
[36m@@ -1,10 +1,14 @@[m
 #include "kernel/vga.h"[m
 #include "kernel/terminal.h"[m
 [m
[32m+[m[32m#include <stdbool.h>[m
[32m+[m
 void kernel() [m
 {[m
[31m-	terminal_init();[m
 	terminal_writestring("Hello, World!\n");[m
 	terminal_writestring("Hello, Again!");[m
[32m+[m
[32m+[m	[32mwhile (true)[m
[32m+[m		[32m;[m
 }[m
 [m
[1mdiff --git a/kernel/src/terminal.c b/kernel/src/terminal.c[m
[1mindex 320b215..ec822ef 100644[m
[1m--- a/kernel/src/terminal.c[m
[1m+++ b/kernel/src/terminal.c[m
[36m@@ -1,4 +1,5 @@[m
 [m
[32m+[m[32m#include <string.h>[m
 #include "kernel/terminal.h"[m
 [m
 size_t column, row;[m
[36m@@ -48,15 +49,6 @@[m [mvoid terminal_writechar(unsigned char c)[m
 	}[m
 }[m
 [m
[31m-size_t strlen(const char* str)[m
[31m-{[m
[31m-	size_t len = 0;[m
[31m-	while (str[len])[m
[31m-		len++;[m
[31m-[m
[31m-	return len;[m
[31m-}[m
[31m-[m
 // Does not affect the cursor[m
 void terminal_writestring_pos(const char* str, size_t row, size_t column)[m
 {[m
[36m@@ -66,7 +58,7 @@[m [mvoid terminal_writestring_pos(const char* str, size_t row, size_t column)[m
 		{[m
 			column = 0;[m
 			row++;[m
[31m-			if (row >= VGA_TERMINAL_HEIGHT)[m
[32m+[m			[32mif (row >= VGA_TEXT_HEIGHT)[m
 				row = 0;[m
 [m
 			continue;[m
[1mdiff --git a/libc/Makefile b/libc/Makefile[m
[1mnew file mode 100644[m
[1mindex 0000000..947323e[m
[1m--- /dev/null[m
[1m+++ b/libc/Makefile[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m
[32m+[m[32mARCH := $(shell ../arch.sh)[m
[32m+[m
[32m+[m[32mGNU_ARCH := $(shell ../compiler-arch.sh)[m
[32m+[m
[32m+[m[32mCC := $(GNU_ARCH)-gcc[m
[32m+[m[32mLD := $(GNU_ARCH)-ld[m
[32m+[m[32mAS := $(GNU_ARCH)-as[m
[32m+[m[32mAR := $(GNU_ARCH)-ar[m
[32m+[m
[32m+[m[32mCFLAGS_LIBK := -ffreestanding --std=gnu11 Wall -Wextra -O2[m[41m [m
[32m+[m[32mCPPFLAGS_LIBK := -D_IS__LIBK -Iinclude[m
[32m+[m
[32m+[m[32mSYSTEM_DIR := ../sys[m
[32m+[m[32mINCLUDE_DIR := $(SYSTEM_DIR)/include[m
[32m+[m[32mLIBC_LIBK_DIR := $(SYSTEM_DIR)/lib[m
[32m+[m[32mCPPFLAGS_LIBK := $(CPPFLAGS_LIBK) -I$(INCLUDE_DIR)[m
[32m+[m
[32m+[m[32mHEADERS := $(wildcard include/*.h)[m
[32m+[m[32mOBJ_FILES := src/string.o[m
[32m+[m
[32m+[m[32mall: install-headers all-libk[m
[32m+[m
[32m+[m[32mall-libk: $(OBJ_FILES)[m
[32m+[m	[32m$(AR) rcs $(LIBC_LIBK_DIR)/libk.a $(OBJ_FILES)[m
[32m+[m
[32m+[m[32m%.o: %.c[m
[32m+[m	[32m$(CC) $(CFLAGS_LIBK) $(CPPFLAGS_LIBK) -c $< -o $@[m
[32m+[m
[32m+[m
[32m+[m[32minstall-headers:[m
[32m+[m	[32m@echo "Installing the system headers"[m
[32m+[m	[32m@mkdir -p $(INCLUDE_DIR)/libc[m
[32m+[m	[32m@cp $(HEADERS) $(INCLUDE_DIR)/libc[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/libc/include/string.h b/libc/include/string.h[m
[1mnew file mode 100644[m
[1mindex 0000000..1d2a111[m
[1m--- /dev/null[m
[1m+++ b/libc/include/string.h[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m#ifndef __STRING_H[m
[32m+[m[32m#define __STRING_H[m
[32m+[m
[32m+[m[32m#include <stdint.h>[m
[32m+[m[32m#include <stddef.h>[m
[32m+[m
[32m+[m[32mint memcmp(const void* buf1, const void* buf2, size_t count);[m
[32m+[m[32mvoid* memcpy(void *dest, const void* src, size_t count);[m
[32m+[m[32mvoid* memmove(void* dest, const void* src, size_t count);[m
[32m+[m[32mvoid* memset(void* dest, int c, size_t count);[m
[32m+[m
[32m+[m[32msize_t strlen(const char* str);[m
[32m+[m
[32m+[m[32m#endif[m
[32m+[m
[1mdiff --git a/libc/src/string.c b/libc/src/string.c[m
[1mnew file mode 100644[m
[1mindex 0000000..ea36f57[m
[1m--- /dev/null[m
[1m+++ b/libc/src/string.c[m
[36m@@ -0,0 +1,81 @@[m
[32m+[m
[32m+[m[32m#include "string.h"[m
[32m+[m
[32m+[m[32msize_t strlen(const char* str)[m
[32m+[m[32m{[m
[32m+[m	[32msize_t size = 0;[m
[32m+[m	[32mwhile (str[size])[m
[32m+[m		[32msize++;[m
[32m+[m
[32m+[m	[32mreturn size;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint memcmp(const void* buf1, const void* buf2, size_t count)[m
[32m+[m[32m{[m
[32m+[m	[32munsigned char* ptr1 = (unsigned char*)buf1;[m
[32m+[m	[32munsigned char* ptr2 = (unsigned char*)buf2;[m
[32m+[m
[32m+[m	[32mfor (size_t i = 0; i < count; i++)[m
[32m+[m	[32m{[m
[32m+[m		[32mif (ptr1[i] == ptr2[i])[m
[32m+[m			[32mcontinue;[m
[32m+[m		[32melse if (ptr1[i] < ptr2[i])[m
[32m+[m			[32mreturn -1;[m
[32m+[m		[32melse[m
[32m+[m			[32mreturn 1;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn 0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid* memset(void* dest, int c, size_t count)[m
[32m+[m[32m{[m
[32m+[m	[32munsigned char ch = (unsigned char)c;[m
[32m+[m	[32munsigned char* ptr = (unsigned char*)dest;[m
[32m+[m
[32m+[m	[32mfor (size_t i = 0; i < count; i++)[m
[32m+[m	[32m{[m
[32m+[m		[32mptr[i] = ch;[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn dest;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid* memcpy(void* destination, const void* source, size_t num)[m
[32m+[m[32m{[m
[32m+[m	[32munsigned char* dest = (unsigned char*)destination;[m
[32m+[m	[32munsigned char* src = (unsigned char*)source;[m
[32m+[m
[32m+[m	[32mfor (size_t i = 0; i < num; i++)[m
[32m+[m	[32m{[m
[32m+[m		[32mdest[i] = src[i];[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn destination;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid* memmove(void* destination, const void* source, size_t num)[m
[32m+[m[32m{[m
[32m+[m	[32munsigned char* dest = (unsigned char*)destination;[m
[32m+[m	[32munsigned char* src = (unsigned char*)source;[m
[32m+[m
[32m+[m	[32mif (dest < src)[m
[32m+[m	[32m{[m
[32m+[m		[32mfor (size_t i = 0; i < num; i--)[m
[32m+[m		[32m{[m
[32m+[m			[32mdest[i] = src[i];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m	[32melse[m
[32m+[m	[32m{[m
[32m+[m		[32mfor (size_t i = num; i != 0; i++)[m
[32m+[m		[32m{[m
[32m+[m			[32mdest[i - 1] = src[i - 1];[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn destination;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/sys/include/kernel/io.h b/sys/include/kernel/io.h[m
[1mnew file mode 100644[m
[1mindex 0000000..461a55a[m
[1m--- /dev/null[m
[1m+++ b/sys/include/kernel/io.h[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#ifndef __IO_H[m
[32m+[m[32m#define __IO_H[m
[32m+[m
[32m+[m[32m#include <stddef.h>[m
[32m+[m[32m#include <stdint.h>[m
[32m+[m
[32m+[m[32minline void outb(uint16_t port, uint8_t value)[m
[32m+[m[32m{[m
[32m+[m[32m    asm volatile ("outb %1, %0" : : "dN" (port), "a" (value));[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32minline uint8_t inb(uint16_t port) {[m
[32m+[m[32m    uint8_t data;[m
[32m+[m[32m    asm volatile ("inb %1, %0" : "=a" (data) : "Nd" (port));[m
[32m+[m[32m    return data;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#endif[m
\ No newline at end of file[m
[1mdiff --git a/sys/lib/kernel/terminal.h b/sys/include/kernel/terminal.h[m
[1msimilarity index 100%[m
[1mrename from sys/lib/kernel/terminal.h[m
[1mrename to sys/include/kernel/terminal.h[m
[1mdiff --git a/sys/lib/kernel/vga.h b/sys/include/kernel/vga.h[m
[1msimilarity index 100%[m
[1mrename from sys/lib/kernel/vga.h[m
[1mrename to sys/include/kernel/vga.h[m
[1mdiff --git a/sys/include/libc/string.h b/sys/include/libc/string.h[m
[1mnew file mode 100644[m
[1mindex 0000000..1d2a111[m
[1m--- /dev/null[m
[1m+++ b/sys/include/libc/string.h[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m#ifndef __STRING_H[m
[32m+[m[32m#define __STRING_H[m
[32m+[m
[32m+[m[32m#include <stdint.h>[m
[32m+[m[32m#include <stddef.h>[m
[32m+[m
[32m+[m[32mint memcmp(const void* buf1, const void* buf2, size_t count);[m
[32m+[m[32mvoid* memcpy(void *dest, const void* src, size_t count);[m
[32m+[m[32mvoid* memmove(void* dest, const void* src, size_t count);[m
[32m+[m[32mvoid* memset(void* dest, int c, size_t count);[m
[32m+[m
[32m+[m[32msize_t strlen(const char* str);[m
[32m+[m
[32m+[m[32m#endif[m
[32m+[m
